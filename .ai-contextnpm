# ⏱️ 시간분배 타이머 - 기능 명세서 (PRD)

## 1. 제품 개요

- **목표**: 사용자가 종료 시각을 설정하고, 해당 시간까지 집중할 수 있도록 돕는 타이머 시스템을 제공
- **특징**: 단순한 카운트다운이 아닌, 사용자 정의 작업 분배(퍼센트), 시각적 피드백(원형 그래프), 푸시/진동/소리 알림을 통해 몰입 환경 조성

---

## 2. 주요 기능

### ✅ 종료 시각 기반 타이머 설정
- 현재 시간 이후부터 당일 자정까지 종료 시각 설정 가능
- `TimeSelector` 컴포넌트를 통해 시간/분 직접 입력
- 현재 시각보다 이른 시간 선택 시 자동으로 다음 날로 설정

### ✅ 시간 기반 작업 분배
- 전체 타이머 시간(`totalTime`)을 기준으로 사용자가 설정한 작업 비율(`percentage`)만큼 시간(`duration`)을 자동 할당
- 예시: 90분 → 작업 A(60%), B(40%) → A: 54분, B: 36분

### ✅ CircleTimer 시각화 (SVG 기반)
- 전체 시간을 원형으로 표현하며 작업별 색상으로 분할
- 진행 중인 작업은 굵고 선명한 선으로 강조
- 남은 시간은 색상으로 표현되며, 시간이 흐를수록 **시계방향으로 줄어듦**
- 시작 전에는 작업 비율이 연하게 표시됨
- 완료 시 ‘완료!’ 메시지와 함께 원형 애니메이션 출력

### ✅ 작업(Task) 관리
- 작업 이름 및 비율 입력 가능 (`TaskForm`)
- 비율 합계는 자동 조정 또는 수동 설정 가능
- `TaskList`를 통해 작업 삭제 가능
- 작업 개수 제한 없음

### ✅ 타이머 제어
- 시작: 모든 설정이 완료되면 활성화
- 초기화: 진행 중 상태 포함 전부 초기화 (확인 모달 포함)
- 일시정지: 현재 미지원(향후 계획)

### ✅ 알림 기능
- `Notification API`로 브라우저 푸시 알림 제공
- 모바일 환경에서 `navigator.vibrate()`를 통한 진동 알림
- `Audio` 객체로 사운드 재생 가능 (브라우저 권한 필요)

---

## 3. 사용자 흐름 (UX Flow)

1. **종료 시각 선택**
2. **작업 추가 & 분배 비율 설정**
3. **타이머 시작**
4. **시각적 진행률 확인 & 작업 전환 알림 수신**
5. **타이머 종료 → 완료 메시지 출력**

---

## 4. 주요 컴포넌트 구조

| 컴포넌트            | 역할 |
|---------------------|------|
| `TimeSelector`      | 종료 시각 입력 (시간/분) |
| `TaskForm`          | 작업 추가 입력 (이름/비율) |
| `TaskList`          | 작업 목록 + 삭제 기능 |
| `TimerButtons`      | 시작 / 초기화 버튼 |
| `CircleTimer`       | SVG 기반 타이머 시각화 |
| `TimerHeader`       | 상단 텍스트 정보 표시 |
| `TimerInfo`         | 경과 시간 / 남은 시간 안내 |
| `NotificationManager` | 알림 권한 요청 처리 |

---

## 5. 기술 스택

- **Next.js** + **React (TypeScript)**
- **Tailwind CSS**: 스타일링
- **SVG**: 시각적 원형 진행률 구현
- **Date-fns**: 시간 계산
- **브라우저 API**: Notification, Vibrate, Audio

---

## 6. 향후 개선 방향

- 타이머 **일시정지/재개** 기능
- 작업 전환 시 자동 **사운드 알림**
- 작업별 남은 시간/전체 시간 텍스트 UI
- 전체 사용 이력 저장 기능 (LocalStorage 또는 DB 연동)
- PWA 기능 추가 (모바일 앱처럼 실행)

---

## 7. 작성 정보

- 작성자: garam.kim  
- 작성일: 2025-05-18  
- 최근 업데이트: 자동 작업 전환 알림 + 진행률 시각화 개선 적용
